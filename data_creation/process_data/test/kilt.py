"""
This script is used to convert results generated by the model to the KILT test format.

The format converted should be as follows (from the KILT test submission):
{
"id": x,
"output": [
	{
	"answer": y,
	"provenance": [
		{"wikipedia_id": z}, 
		{"wikipedia_id": w}, 
		...
	]
	}
]
}
"""


import argparse

from ...utils import load_jsonlines, save_file_jsonl

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--input_file', type=str, required=True)
    parser.add_argument('--output_file', type=str, required=True)
    parser.add_argument('--ctx_num', type=int,)
    args = parser.parse_args()

    if args.input_file is None:
        raise ValueError("Please provide an input file to process.")
    input_data = load_jsonlines(args.input_file)

    if args.output_file is None:
        raise ValueError("Please provide an output file to save the processed data.")

    new_data = []
    for idx, item in enumerate(input_data):
        task = item['dataset_name']
        id = item['id']
        input = item['input']
        # different corpus may have different id of the item
        provenance = [{"wikipedia_id": ctx['id']} for ctx in item['ctxs'][:args.ctx_num]]
        answer = item['prediction']
        # For fever task, we need to recover the original labels
        if task == "fever":
            if "true" in answer:
                answer = answer.replace("true", "SUPPORTS")
            elif "false" in answer:
                answer = answer.replace("false", "REFUTES")
        # we only have one prediction, so the length of output is 1
        output = [{"answer": answer, "provenance": provenance}]
        new_data.append({"id": id, "input": input, "output": output})
    
    print(f"Saving the processed data to {args.output_file}...")
    save_file_jsonl(new_data, args.output_file)
    

if __name__ == "__main__":
    main()